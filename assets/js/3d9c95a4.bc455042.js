"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[279],{2724:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"home","title":"Core Concepts","description":"tsk is a simple task-runner and build tool with opinions.  tsk uses TOML to describe units of work called, bear with me, \\"tasks\\". By default, your tasks live in a file named tasks.toml. A task is typically composed of one or more commands. For example:","source":"@site/docs/home.md","sourceDirName":".","slug":"/home","permalink":"/tsk-docs/docs/home","draft":false,"unlisted":false,"editUrl":"https://github.com/notnmeyer/tsk-docs/docs/home.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"home","title":"Core Concepts","sidebar_position":2,"sidebar_label":"Core Concepts"},"sidebar":"default","previous":{"title":"Installation","permalink":"/tsk-docs/docs/installation"},"next":{"title":"Usage","permalink":"/tsk-docs/docs/usage"}}');var i=s(4848),o=s(8453);const a={id:"home",title:"Core Concepts",sidebar_position:2,sidebar_label:"Core Concepts"},l=void 0,d={},r=[{value:"Dependencies",id:"dependencies",level:2},{value:"Dependency Groups",id:"dependency-groups",level:3},{value:"Avoiding Shell in Config Files",id:"avoiding-shell-in-config-files",level:2}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"tsk"})," is a simple task-runner and build tool with opinions.  ",(0,i.jsx)(n.code,{children:"tsk"}),' uses TOML to describe units of work called, bear with me, "tasks". By default, your tasks live in a file named ',(0,i.jsx)(n.code,{children:"tasks.toml"}),". A task is typically composed of one or more commands. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'title="tasks.toml"',children:'[tasks.hello]\ncmds = ["echo Hello, World!"]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Running this task does what you'd expect:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"\u279c tsk hello\nHello, World!\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Nothing Earth shattering here. What seperates ",(0,i.jsx)(n.code,{children:"tsk"})," from other tools is how it handles dependencies and how it encourages you to ",(0,i.jsx)(n.em,{children:"not"})," write extensive shell within your task definitions."]}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["A task can include one or more task names in a ",(0,i.jsx)(n.code,{children:"deps"})," attribute. Dependencies are just regular tasks and can have deps of their own, etc."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'title="tasks.toml"',children:'[tasks.a]\ndeps = [["b"]]\ncmds = ["echo task A"]\n\n[tasks.b]\ncmds = [\'echo task B\']\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Running ",(0,i.jsx)(n.code,{children:"a"})," will first run ",(0,i.jsx)(n.code,{children:"b"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"\u279c tsk a\ntask b\ntask a\n"})}),"\n",(0,i.jsx)(n.h3,{id:"dependency-groups",children:"Dependency Groups"}),"\n",(0,i.jsxs)(n.p,{children:["You may have noticed that ",(0,i.jsx)(n.code,{children:"deps"}),' is an array of arrays. Each nested array is a "dependency group". Dependency groups are one of ',(0,i.jsx)(n.code,{children:"tsk"}),"'s key features. Individual dependencies within a dependency group are exeucted in ",(0,i.jsx)(n.em,{children:"parallel"}),", while entire dependency groups are executed ",(0,i.jsx)(n.em,{children:"sequentially"}),". We can visualize this with the following example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[tasks.a]\ncmds = ["echo a"]\n\n[tasks.b]\ncmds = ["echo b"]\n\n[tasks.c]\ncmds = ["echo c"]\n\n[tasks.main]\ndeps = [\n  ["a", "b"], # a and b will run in parallel\n  ["c"],      # c will run after the previous group finishes\n]\ncmds = ["echo done"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["If you run ",(0,i.jsx)(n.code,{children:"main"})," a few times you'll see that ",(0,i.jsx)(n.code,{children:"a"})," and ",(0,i.jsx)(n.code,{children:"b"})," consistently run before ",(0,i.jsx)(n.code,{children:"c"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"\u279c tsk main\nb\na\nc\ndone\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Remember that tasks within a dependency group ",(0,i.jsx)(n.em,{children:"run in parallel"})," and may not finish in a consistent order. Place dependencies in different groups when the order they run matters."]})}),"\n",(0,i.jsx)(n.h2,{id:"avoiding-shell-in-config-files",children:"Avoiding Shell in Config Files"}),"\n",(0,i.jsxs)(n.p,{children:["Writing shell in configuration files sucks. Luckily, tsk makes it easy to avoid. If your task doesn't include a ",(0,i.jsx)(n.code,{children:"cmds"})," attribute, tsk will look for and execute a script: ",(0,i.jsx)(n.code,{children:"tsk/<task-name>"}),". If your task is more than a few commands or needs flow control, write a script!"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",metastring:'title="tasks.toml"',children:"[tasks.no-script]\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"\u279c tsk --list --filter no-script\n[no-script]\n  # will run `tsk/no-script`\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"The script must be executable and should include a hashbang."})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Your script doesn't have to be shell. Any valid hashbang will work, provided you have the necessary tools installed."})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(6540);const i={},o=t.createContext(i);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);